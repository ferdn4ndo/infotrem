# Generated by Django 3.2.15 on 2022-09-18 03:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('email_validated', models.BooleanField(default=False)),
                ('email_validation_sent', models.BooleanField(default=False)),
                ('email_validation_hash', models.CharField(blank=True, max_length=128, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('cpf', models.BigIntegerField(null=True)),
                ('birth_date', models.DateField(null=True)),
                ('address', models.TextField(blank=True, max_length=255, null=True)),
                ('number', models.PositiveIntegerField(null=True)),
                ('complement', models.CharField(blank=True, max_length=255, null=True)),
                ('zipcode', models.PositiveIntegerField(null=True)),
                ('phone', models.BigIntegerField(null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('last_activity_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last activity registered by the user in the system')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('title', models.CharField(max_length=255, verbose_name='Title of the album')),
                ('description', models.TextField(max_length=65535, verbose_name='Description of the album')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='album_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='album_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('text', models.TextField(max_length=1024)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('replies_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.comment', verbose_name='The comment which this one is replying to')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('abbrev', models.TextField(max_length=20, verbose_name='Abbreviation (short name) of the company')),
                ('name', models.TextField(max_length=255, verbose_name='Name of the company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyPaintScheme',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateField(null=True, verbose_name='Approximate date when the paint scheme has started')),
                ('end_date', models.DateField(null=True, verbose_name='Approximate date when the paint scheme has ended')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintscheme_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('railroad', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.company')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintscheme_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('type', models.CharField(choices=[('OFFICIAL_DOCUMENT', 'Information from an official document'), ('REPORT', 'Information reported from somewhere/someone else'), ('STORY', 'An story/memory informed by someone')], max_length=64)),
                ('content', models.TextField(max_length=65535)),
                ('status', models.CharField(choices=[('DISCUSSION', 'Information is still under discussion'), ('ANALYSIS', 'Information is under analysis by a moderator'), ('APPROVED', 'Information was approved by a moderator'), ('REJECTED', 'Information was rejected by a moderator')], default='ANALYSIS', max_length=10)),
                ('references', models.TextField(max_length=1024, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='information_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='information_moderator', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='information_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('abbrev', models.TextField(db_index=True, max_length=10, null=True)),
                ('name', models.TextField(max_length=255)),
                ('type', models.CharField(choices=[('STATION', 'Station'), ('STOP', 'Stop'), ('TERMINAL', 'Terminal'), ('CROSSING_YARD', 'Crossing Yard'), ('CLASSIFICATION_YARD', 'Classification Yard'), ('TUNNEL', 'Tunnel'), ('BRIDGE', 'Bridge'), ('OTHERS', 'Other Type')], max_length=100, null=True)),
                ('status', models.CharField(choices=[('PROJECT', 'Project'), ('UNDER_CONSTRUCTION', 'Under Construction'), ('WORKING', 'Working'), ('ABANDONED', 'Abandoned'), ('DEMOLISHED', 'Demolished'), ('TRANSFORMED', 'Transformed')], max_length=100, null=True)),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('elevation', models.FloatField(null=True, verbose_name='Elevation (in meters) of the location')),
                ('build_year', models.IntegerField(null=True, verbose_name='Year when it was built')),
                ('other_names', models.TextField(max_length=255, null=True)),
                ('is_verified', models.BooleanField(default=False, verbose_name="If the place is verified and it's correct")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('abbrev', models.CharField(max_length=2, verbose_name='Abbreviation of the state with 2 letters')),
                ('name', models.CharField(max_length=255, verbose_name='Full name of the state')),
                ('ibge_id', models.PositiveIntegerField(null=True, verbose_name='IBGE ID of the state')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('to', models.CharField(max_length=255, verbose_name='Destination e-mail address')),
                ('subject', models.CharField(max_length=255, verbose_name='Subject of the e-mail')),
                ('message_html', models.TextField(verbose_name='HTML content of the e-mail')),
                ('message_text', models.TextField(blank=True, null=True, verbose_name='Plain text content of the e-mail')),
                ('reply_to', models.CharField(blank=True, max_length=255, null=True, verbose_name='E-mail address to reply')),
                ('sent', models.BooleanField(default=False, verbose_name='Flag to indicate if the e-mail was sent')),
                ('sent_at', models.DateTimeField(null=True, verbose_name='Date/time when the e-mail was sent')),
                ('server_response', models.TextField(null=True, verbose_name='SMTP server response when sending the e-mail')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short name of the manufacturer')),
                ('full_name', models.CharField(max_length=255, verbose_name='Long (full) name of the manufacturer')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturer_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturer_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the section path')),
                ('type', models.CharField(choices=[('RAIL', 'The path is a rail section'), ('TUNNEL', 'The path is a tunnel section'), ('BRIDGE', 'The path is a bridge section'), ('BUILDING', 'The path represents a build (polygon)'), ('AREA', 'The path represents an area (polygon)')], max_length=100)),
                ('status', models.CharField(choices=[('ACTIVE', 'Path is active (with frequent or sporadic usage)'), ('INACTIVE', 'Path is inactive (exists but not used anymore)'), ('ERADICATED', 'Path was already eradicated')], max_length=100, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='path_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='path_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the route')),
                ('builder_railroad', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255)),
                ('build_year', models.PositiveIntegerField(null=True, verbose_name='Year when the route section was built')),
                ('builder_railroad', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesection_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.route')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesection_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSectionLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('location_route_order', models.IntegerField(verbose_name='Ordering number inside the route, from origin to destiny')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_sections', to='core.location')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_locations', to='core.route')),
                ('railroad_route_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_locations', to='core.routesection')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrackGauge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('code', models.CharField(db_index=True, max_length=32, unique=True)),
                ('size', models.IntegerField(verbose_name='Gauge size in millimeters')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(editable=False, max_length=255, unique=True, verbose_name='Token used to login (from uServer-Auth)')),
                ('issued_at', models.DateTimeField(editable=False, verbose_name='Date when the token was issued by uServer-Auth')),
                ('expires_at', models.DateTimeField(editable=False, verbose_name='Date when the token expires (defined by uServer-Auth)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User that has the token')),
            ],
        ),
        migrations.CreateModel(
            name='RouteSectionLocationKilometer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('kilometer', models.FloatField(verbose_name='Kilometer of the location inside the route')),
                ('kilometer_year', models.PositiveIntegerField(null=True, verbose_name='Year of the recorded kilometer')),
                ('elevation', models.FloatField(null=True, verbose_name='Elevation (in meters) of the location kilometer')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocationkilometer_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('railroad_route_section_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kilometers', to='core.routesectionlocation')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocationkilometer_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routeinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.information', verbose_name='Information associated with the route')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_information', to='core.route', verbose_name='Route that holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routeinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PathPoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('elevation', models.FloatField(null=True, verbose_name='Elevation (in meters) of the point')),
                ('order', models.FloatField(verbose_name='Value used to sort the points')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pathpoint_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='core.path')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pathpoint_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ManufacturerInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturerinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.information', verbose_name='Information associated with the manufacturer')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.manufacturer', verbose_name='Manufacturer which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturerinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationTrackGauge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationtrackgauge_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_gauges', to='core.location', verbose_name='Location which has the track gauge')),
                ('track_gauge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.trackgauge', verbose_name='Track gauge associated with the location')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationtrackgauge_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.information', verbose_name='Information associated with the location')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='information', to='core.location', verbose_name='Location which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationCity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the city')),
                ('ibge_id', models.PositiveIntegerField(null=True, verbose_name='IBGE ID of the city')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.locationstate', verbose_name='State where the city is situated')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='location',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.locationcity'),
        ),
        migrations.AddField(
            model_name='location',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user'),
        ),
        migrations.AddField(
            model_name='location',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user'),
        ),
        migrations.CreateModel(
            name='InformationEffect',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('field_name', models.TextField(max_length=255, verbose_name='Name of the field that will have the information changed once accepted')),
                ('old_value', models.TextField(max_length=1024, null=True, verbose_name='The original value of the field (before the information is accepted)')),
                ('new_value', models.TextField(max_length=1024, verbose_name='The new value of the field (after the information is accepted)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='informationeffect_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='core.information', verbose_name='Information object where the changes will take effect once accepted')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='informationeffect_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('type', models.CharField(choices=[('BUG', 'Bug/problem report'), ('FEEDBACK', 'Feedback (suggestions, critics, etc)'), ('INCORRECT_INFO', 'Incorrect information presented on the website'), ('AUTHOR_REQUEST', 'Author definition and copyright issues'), ('DATA_REMOVAL', 'Request to remove data')], max_length=64)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('email', models.CharField(blank=True, max_length=128, null=True)),
                ('phone', models.CharField(blank=True, max_length=128, null=True)),
                ('message', models.TextField(blank=True, max_length=5000, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyPaintSchemeInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintschemeinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.information', verbose_name='Information associated with the paint scheme')),
                ('paint_scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='railroad_information', to='core.companypaintscheme', verbose_name='Paint scheme which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintschemeinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companyinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.information', verbose_name='Information associated with the company')),
                ('railroad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_information', to='core.company', verbose_name='Company which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companyinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('liked_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the comment was liked')),
                ('comment', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.comment', verbose_name='The comment that was liked')),
                ('liked_by', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='comment_like_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who liked the comment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('liked_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the album was liked')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.album', verbose_name='The album that was liked')),
                ('liked_by', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='album_like_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who liked the album')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumFavorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('favorited_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the album was favorited')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.album')),
                ('favorited_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='album_favorite_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who favorited the album')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.album', verbose_name='The album associated with the comment')),
                ('comment', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.comment', verbose_name='The comment associated with the album')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='albumcomment_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='albumcomment_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.locationcity'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.locationstate'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
