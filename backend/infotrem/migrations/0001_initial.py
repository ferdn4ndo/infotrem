# Generated by Django 3.0.5 on 2020-04-23 02:00

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.datetime_safe
import django.utils.timezone
import infotrem.models.storage
import jsonfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Information',
            fields=[
                ('information_uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=65535)),
                ('status', models.CharField(choices=[('DISCUSSION', 'Discussion'), ('ANALYSIS', 'Under Analysis'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='ANALYSIS', max_length=10)),
                ('references', models.TextField(max_length=1024, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbrev', models.TextField(db_index=True, max_length=10)),
                ('name', models.TextField(max_length=255)),
                ('type', models.CharField(choices=[('STATION', 'Station'), ('CROSSING_YARD', 'Crossing Yard'), ('CLASSIFICATION_YARD', 'Classification Yard'), ('TUNNEL', 'Tunnel'), ('BRIDGE', 'Bridge'), ('OTHERS', 'Other Type')], max_length=100)),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('manufacturer_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('short_name', models.CharField(max_length=20)),
                ('full_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='MediaAlbum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(max_length=65535)),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MediaItem',
            fields=[
                ('media_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(max_length=65535, null=True)),
                ('status', models.CharField(choices=[('Draft (not ready for processing yet)', 'Draft'), ('In the queue (waiting for processing)', 'Queue'), ('Being processed by a worker', 'Processing'), ('Media is waiting approval/reject by a moderator', 'Review'), ('Media was processed, approved and published', 'Published'), ('Media was temporary rejected, with a possible re-review', 'Rejected Temp'), ('Media was permanently rejected', 'Rejected Perm')], default='Draft (not ready for processing yet)', max_length=32)),
                ('raw_height', models.PositiveIntegerField(null=True, verbose_name='Height of the raw media item')),
                ('raw_width', models.PositiveIntegerField(null=True, verbose_name='Width of the raw media item')),
                ('known_author', models.BooleanField(default=False, verbose_name='If the author is known')),
                ('author_confirmed', models.BooleanField(default=False, verbose_name='If the author is in the system and confirmed')),
                ('original_url', models.TextField(max_length=255, null=True, verbose_name='Original URL, if downloaded')),
                ('references', models.TextField(max_length=1024, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='media_author+', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RailroadCompany',
            fields=[
                ('company_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbrev', models.TextField(max_length=10)),
                ('name', models.TextField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='RailroadPaintScheme',
            fields=[
                ('paint_scheme_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateField(null=True, verbose_name='Approx. date when the paint scheme has started')),
                ('end_date', models.DateField(null=True, verbose_name='Approx. date when the paint scheme has ended')),
                ('railroad', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='infotrem.RailroadCompany')),
            ],
        ),
        migrations.CreateModel(
            name='RailroadRoute',
            fields=[
                ('route_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('builder_railroad', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RailroadCompany')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStock',
            fields=[
                ('rolling_stock_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('LOCOMOTIVE', 'Locomotive'), ('FREIGHT_CAR', 'Freight Car'), ('PASSENGER_CAR', 'Passenger Car'), ('RAILCAR_COACH_MU', 'Railcar, Rail motor coach or Multiple Unit'), ('NON_REVENUE_CAR', 'Non-revenue Car'), ('OTHERS', 'Others (non-listed)')], max_length=100)),
                ('is_sigo', models.BooleanField(default=True, verbose_name='If the rolling stock item is in SIGO standard')),
                ('sigo_number', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)], verbose_name='SIGO range end number')),
                ('painted_identifier', models.CharField(max_length=10, verbose_name='Painted identifier with letters/numbers/symbols')),
                ('state', models.CharField(choices=[('ACTIVE', 'Active'), ('INOPERATIVE', 'Inoperative'), ('DISMANTLED', 'Dismantled'), ('TRANSFORMED', 'Transformed'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=100)),
            ],
            options={
                'verbose_name': 'Material Rodante',
                'verbose_name_plural': 'Materiais Rodantes',
            },
        ),
        migrations.CreateModel(
            name='RollingStockFreightCarCategory',
            fields=[
                ('letter', models.CharField(db_index=True, max_length=1, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockNonRevenueCarType',
            fields=[
                ('letters', models.CharField(db_index=True, max_length=2, primary_key=True, serialize=False, unique=True)),
                ('description', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('ELECTRICAL_MAINTENANCE', 'Equipment for Electrical Maintenance'), ('RESCUE', 'Rescue Equipment'), ('TRACK', 'Track Equipment'), ('VEGETATION', 'Vegetation Equipment'), ('OTHER', 'Other Equipment')], max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockPassengerCarMaterial',
            fields=[
                ('letter', models.CharField(db_index=True, max_length=1, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name of the material of passenger cars')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockPassengerCarType',
            fields=[
                ('letter', models.CharField(db_index=True, max_length=1, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TrackGaugeConfiguration',
            fields=[
                ('gauge_configuration_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('gauges', jsonfield.fields.JSONField(verbose_name='Array with the gauges of current configuration')),
            ],
        ),
        migrations.CreateModel(
            name='ImageMediaItem',
            fields=[
                ('media_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='infotrem.MediaItem')),
                ('focal_length', models.FloatField(null=True, verbose_name='Focal length of the lenses in millimeters')),
                ('aperture', models.CharField(max_length=255, null=True)),
                ('flash_fired', models.BooleanField(null=True)),
                ('iso', models.PositiveIntegerField(null=True)),
                ('orientation_angle', models.IntegerField(null=True)),
                ('is_flipped', models.BooleanField(null=True)),
                ('exposition', models.CharField(max_length=255, null=True)),
                ('datetime_taken', models.CharField(max_length=255, null=True)),
                ('camera_manufacturer', models.CharField(max_length=255, null=True)),
                ('camera_model', models.CharField(max_length=255, null=True)),
                ('exif_image_height', models.IntegerField(null=True)),
                ('exif_image_width', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StorageFile',
            fields=[
                ('file_uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('signature_key', models.CharField(default=infotrem.models.storage.generate_random_signature_key, max_length=64)),
                ('file_type', models.CharField(choices=[('IMAGE', 'Image'), ('VIDEO', 'Video')], max_length=10, null=True)),
                ('file_size', models.PositiveIntegerField(verbose_name='File size in bytes')),
                ('file_hash', models.CharField(max_length=64, null=True, verbose_name='SHA256 hash of the processed file')),
                ('mime_type', models.CharField(max_length=255)),
                ('original_filename', models.CharField(max_length=255)),
                ('large_file_path', models.CharField(max_length=1024, null=True)),
                ('small_file_path', models.CharField(max_length=1024, null=True)),
                ('storage_file_path', models.CharField(max_length=1024, null=True)),
                ('storage_type', models.CharField(choices=[('AMAZON_S3', 'Amazon S3'), ('LOCAL', 'Local')], default='AMAZON_S3', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockSigoSeriesInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sigo_start_number', models.IntegerField(validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)], verbose_name='SIGO range start number')),
                ('sigo_end_number', models.IntegerField(validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)], verbose_name='SIGO range end number')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information', verbose_name='The information about the numeric range')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockSigoRegional',
            fields=[
                ('letter', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Nome da regional')),
                ('abbrev', models.CharField(max_length=20, null=True, verbose_name='Sigla da regional')),
                ('original_company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RailroadCompany')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockLocomotiveModel',
            fields=[
                ('model_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('prime_mover', models.CharField(choices=[('MANUAL', 'Manual'), ('STEAM', 'Steam'), ('DIESEL_MECHANICAL', 'Diesel-mechanical'), ('DIESEL_ELECTRIC', 'Diesel–electric'), ('DIESEL_HYDRAULIC', 'Diesel-hydraulic'), ('ELECTRIC', 'Electric'), ('GAS_TURBINE', 'Gas turbine'), ('HYBRID', 'Hybrid'), ('OTHERS', 'Others types')], max_length=100, null=True)),
                ('first_unit_year', models.IntegerField(null=True, verbose_name='Year when the first unit was produced')),
                ('adhesion_factor', models.FloatField(null=True, verbose_name='Adhesion factor of the locomotive (0 to 1)')),
                ('allow_multiple_units', models.BooleanField(null=True, verbose_name='If allows multiple traction units connected')),
                ('brake_system', models.CharField(max_length=200, null=True, verbose_name='Brake System (eg. 26L)')),
                ('cooling_fluid_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the cooling fluid')),
                ('cylinders_size', models.CharField(max_length=200, null=True, verbose_name='Cylinders Size')),
                ('fuel_capacity', models.CharField(max_length=200, null=True, verbose_name='Range of size of the fuel tank')),
                ('generator', models.CharField(max_length=200, null=True, verbose_name='Generator (eg. D32T)')),
                ('height', models.FloatField(null=True, verbose_name='Height of the locomotive in meters')),
                ('horsepower_available', models.PositiveIntegerField(null=True, verbose_name='Traction (available) horsepower')),
                ('horsepower_total', models.PositiveIntegerField(null=True, verbose_name='Total horsepower')),
                ('length', models.FloatField(null=True, verbose_name='Length of the locomotive in meters')),
                ('lubricant_oil_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the lubricant oil')),
                ('minimum_track_radius', models.FloatField(null=True, verbose_name='Minimum track curve radius in meters')),
                ('motor_capacity', models.CharField(max_length=200, null=True, verbose_name='Motor Capacity')),
                ('nickname', models.CharField(max_length=200, null=True, verbose_name='Nickname of the model')),
                ('primary_motor', models.CharField(max_length=20, null=True, verbose_name='Primary motor (eg: 12-645E)')),
                ('rpm_limit', models.IntegerField(null=True, verbose_name='RMP limit of the motor')),
                ('sand_capacity', models.FloatField(null=True, verbose_name='Total sand capacity in cubic meters')),
                ('serial_number_range', models.CharField(max_length=200, null=True, verbose_name='Serial number range')),
                ('traction_effort', models.FloatField(null=True, verbose_name='Traction effort in kgf')),
                ('traction_motor', models.CharField(max_length=20, null=True, verbose_name='Traction motor (eg: D29)')),
                ('truck_type', models.CharField(max_length=200, null=True, verbose_name='Truck type')),
                ('velocity_max', models.FloatField(null=True, verbose_name='Maximum operational velocity of the locomotive in km/h')),
                ('velocity_min', models.FloatField(null=True, verbose_name='Minimum operational velocity of the locomotive in km/h')),
                ('weight', models.FloatField(null=True, verbose_name='Weight of the locomotive in kilograms')),
                ('weight_adherent', models.FloatField(null=True, verbose_name='Adherent weight of the locomotive in kilograms')),
                ('wheel_arrangement_aar', models.CharField(max_length=20, null=True, verbose_name='AAR wheelset, eg: A1A-A1A')),
                ('wheel_arrangement_whyte', models.CharField(max_length=20, null=True, verbose_name='Whyte wheelset, eg: 0-4-2')),
                ('wheel_diameter', models.FloatField(null=True, verbose_name='Wheel diameter in millimeters')),
                ('wheelbase', models.FloatField(null=True, verbose_name='Wheelbase in meters')),
                ('width', models.FloatField(null=True, verbose_name='Width of the locomotive in meters')),
                ('wikipedia_url', models.CharField(max_length=255, null=True, verbose_name='Wikipedia URL of the model')),
                ('manufacturer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.Manufacturer')),
                ('motor_builder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
                ('rolling_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.RollingStock')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockFreightCarType',
            fields=[
                ('letters', models.CharField(db_index=True, max_length=2, primary_key=True, serialize=False, unique=True)),
                ('description', models.CharField(max_length=100)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='infotrem.RollingStockFreightCarCategory')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockFreightCarGrossWeightType',
            fields=[
                ('letter', models.CharField(db_index=True, max_length=1, primary_key=True, serialize=False, unique=True)),
                ('max_gross_tons', models.FloatField(verbose_name='Max gross weight of the type')),
                ('gauge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='infotrem.TrackGaugeConfiguration')),
            ],
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='gauge',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='infotrem.TrackGaugeConfiguration'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='manufacturer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.Manufacturer'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='regional',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockSigoRegional'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='transformed_into',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStock', verbose_name='Transformed Into'),
        ),
        migrations.CreateModel(
            name='RailroadRouteLocation',
            fields=[
                ('route_location_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('location_route_order', models.IntegerField(verbose_name='Ordering number inside the route, from origin to destiny')),
                ('kilometer', models.FloatField(null=True, verbose_name='Kilometer of the location inside the route')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Location')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.RailroadRoute')),
            ],
        ),
        migrations.CreateModel(
            name='RailroadRouteInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.RailroadRoute')),
            ],
        ),
        migrations.CreateModel(
            name='RailroadPaintSchemeInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.RailroadPaintScheme')),
            ],
        ),
        migrations.CreateModel(
            name='RailroadCompanyInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.RailroadCompany')),
            ],
        ),
        migrations.CreateModel(
            name='MediaItemRollingStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator+', to=settings.AUTH_USER_MODEL)),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItem')),
                ('paint_scheme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RailroadPaintScheme')),
                ('rolling_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.RollingStock')),
            ],
        ),
        migrations.CreateModel(
            name='MediaItemReview',
            fields=[
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('decision', models.CharField(choices=[('Request changes (media will be temporary rejected until the author uploads it again)', 'Request Changes'), ('Approved with no changes needed', 'Approved'), ('Reject without possibility of updating the image', 'Rejected')], max_length=10, null=True)),
                ('comment', models.CharField(max_length=1024, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItem')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MediaItemLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItem')),
            ],
        ),
        migrations.CreateModel(
            name='MediaItemFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItem')),
            ],
        ),
        migrations.CreateModel(
            name='MediaItemComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1024)),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItem')),
                ('replies_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItemComment', verbose_name='Replies to')),
            ],
        ),
        migrations.AddField(
            model_name='mediaitem',
            name='file_raw',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.StorageFile'),
        ),
        migrations.AddField(
            model_name='mediaitem',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.Location'),
        ),
        migrations.AddField(
            model_name='mediaitem',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MediaAlbumLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaAlbum')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MediaAlbumItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(null=True, verbose_name='Record last update timestamp')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaAlbum')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator+', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaItem')),
            ],
        ),
        migrations.CreateModel(
            name='MediaAlbumFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.datetime_safe.datetime.utcnow, editable=False, verbose_name='Record creation timestamp')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='infotrem.MediaAlbum')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ManufacturerInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='LocationInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Location')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='track_gauge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='infotrem.TrackGaugeConfiguration'),
        ),
        migrations.AddField(
            model_name='location',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='InformationEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.TextField(max_length=255)),
                ('old_value', models.TextField(max_length=1024)),
                ('new_value', models.TextField(max_length=1024)),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.Information')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockPassengerCar',
            fields=[
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='infotrem.RollingStock')),
                ('material', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockPassengerCarMaterial')),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockPassengerCarType')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockNonRevenueCar',
            fields=[
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='infotrem.RollingStock')),
                ('is_self_propelled', models.BooleanField(default=False, verbose_name='If the car is self propelled')),
                ('prime_mover', models.CharField(choices=[('MANUAL', 'Manual'), ('STEAM', 'Steam'), ('DIESEL_MECHANICAL', 'Diesel-mechanical'), ('DIESEL_ELECTRIC', 'Diesel–electric'), ('DIESEL_HYDRAULIC', 'Diesel-hydraulic'), ('ELECTRIC', 'Electric'), ('GAS_TURBINE', 'Gas turbine'), ('HYBRID', 'Hybrid'), ('OTHERS', 'Others types')], max_length=100, null=True)),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockNonRevenueCarType')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockLocomotive',
            fields=[
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='infotrem.RollingStock')),
                ('adhesion_factor', models.FloatField(null=True, verbose_name='Adhesion factor of the locomotive (0 to 1)')),
                ('allow_multiple_units', models.BooleanField(null=True, verbose_name='If allows multiple traction units connected')),
                ('brake_system', models.CharField(max_length=200, null=True, verbose_name='Brake System (eg. 26L)')),
                ('cooling_fluid_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the cooling fluid')),
                ('cylinders_size', models.CharField(max_length=200, null=True, verbose_name='Cylinders Size')),
                ('build_year', models.IntegerField(null=True, verbose_name='Year when it was build')),
                ('fuel_capacity', models.FloatField(null=True, verbose_name='Maximum amount of liters of the tank')),
                ('generator', models.CharField(max_length=200, null=True, verbose_name='Generator (eg. D32T)')),
                ('height', models.FloatField(null=True, verbose_name='Height of the locomotive in meters')),
                ('horsepower_available', models.PositiveIntegerField(null=True, verbose_name='Traction (available) horsepower')),
                ('horsepower_total', models.PositiveIntegerField(null=True, verbose_name='Total horsepower')),
                ('length', models.FloatField(null=True, verbose_name='Length of the locomotive in meters')),
                ('lubricant_oil_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the lubricant oil')),
                ('minimum_track_radius', models.FloatField(null=True, verbose_name='Minimum track curve radius in meters')),
                ('motor_capacity', models.CharField(max_length=200, null=True, verbose_name='Motor Capacity')),
                ('motor_type', models.CharField(max_length=200, null=True, verbose_name='Motor Type')),
                ('nickname', models.CharField(max_length=200, null=True, verbose_name='Nickname of the model')),
                ('primary_motor', models.CharField(max_length=20, null=True, verbose_name='Primary motor (eg: 12-645E)')),
                ('rpm_limit', models.IntegerField(null=True, verbose_name='RMP limit of the motor')),
                ('sand_capacity', models.FloatField(null=True, verbose_name='Total sand capacity in cubic meters')),
                ('serial_number', models.CharField(max_length=200, null=True, verbose_name='Serial number of the locomotive')),
                ('traction_effort', models.FloatField(null=True, verbose_name='Traction effort in kgf')),
                ('traction_motor', models.CharField(max_length=20, null=True, verbose_name='Traction motor (eg: D29)')),
                ('truck_type', models.CharField(max_length=200, null=True, verbose_name='Truck type')),
                ('velocity_max', models.FloatField(null=True, verbose_name='Maximum operational velocity of the locomotive in km/h')),
                ('velocity_min', models.FloatField(null=True, verbose_name='Minimum operational velocity of the locomotive in km/h')),
                ('weight', models.FloatField(null=True, verbose_name='Weight of the locomotive in kilograms')),
                ('weight_adherent', models.FloatField(null=True, verbose_name='Adherent weight of the locomotive in kilograms')),
                ('weight_per_axle', models.FloatField(null=True, verbose_name='Weight per axle of the locomotive in kilograms')),
                ('wheel_arrangement_aar', models.CharField(max_length=20, null=True, verbose_name='AAR wheelset, eg: A1A-A1A')),
                ('wheel_arrangement_whyte', models.CharField(max_length=20, null=True, verbose_name='Whyte wheelset, eg: 0-4-2')),
                ('wheel_diameter', models.FloatField(null=True, verbose_name='Wheel diameter in millimeters')),
                ('wheelbase', models.FloatField(null=True, verbose_name='Wheelbase in meters')),
                ('width', models.FloatField(null=True, verbose_name='Width of the locomotive in meters')),
                ('model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockLocomotiveModel')),
                ('motor_builder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.Manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='RollingStockFreightCar',
            fields=[
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='infotrem.RollingStock')),
                ('gross_weight_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockFreightCarGrossWeightType')),
                ('model_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='infotrem.RollingStockFreightCarType')),
            ],
        ),
        migrations.CreateModel(
            name='ImageMediaItemSize',
            fields=[
                ('media_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='infotrem.MediaItem')),
                ('size_tag', models.CharField(choices=[('8K (máx 8192x5472 px @ 3:2, 45 Megapixels)', 'Size 8K'), ('4K (máx 4096x2752 px @ 3:2, 11 Megapixels)', 'Size 4K'), ('3K (máx 3200x2144 px @ 3:2, 6.9 Megapixels)', 'Size 3K'), ('2K (máx 2048x1376 px @ 3:2, 2.8 Megapixels)', 'Size 2K'), ('1K (máx 1280x864 px @ 3:2, 1.1 Megapixels)', 'Size 1K'), ('Large Thumbnail (960×640 px)', 'Size Thumb Large'), ('Medium Thumbnail (480×320 px)', 'Size Thumb Medium'), ('Small Thumbnail (240x160 px)', 'Size Thumb Small')], max_length=10, null=True)),
                ('raw_height', models.PositiveIntegerField(null=True, verbose_name='Height of the sized media item')),
                ('raw_width', models.PositiveIntegerField(null=True, verbose_name='Width of the sized media item')),
                ('file_raw', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infotrem.StorageFile')),
            ],
        ),
    ]
