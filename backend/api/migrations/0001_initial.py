# Generated by Django 3.2.4 on 2021-07-14 07:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('email_validated', models.BooleanField(default=False)),
                ('email_validation_sent', models.BooleanField(default=False)),
                ('email_validation_hash', models.CharField(blank=True, max_length=128, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('cpf', models.BigIntegerField(null=True)),
                ('birth_date', models.DateField(null=True)),
                ('address', models.TextField(blank=True, max_length=255, null=True)),
                ('number', models.PositiveIntegerField(null=True)),
                ('complement', models.CharField(blank=True, max_length=255, null=True)),
                ('zipcode', models.PositiveIntegerField(null=True)),
                ('phone', models.BigIntegerField(null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('last_activity_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last activity registered by the user in the system')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('title', models.CharField(max_length=255, verbose_name='Title of the album')),
                ('description', models.TextField(max_length=65535, verbose_name='Description of the album')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='album_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='album_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('text', models.TextField(max_length=1024)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('replies_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment', verbose_name='The comment which this one is replying to')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('abbrev', models.TextField(max_length=20, verbose_name='Abbreviation (short name) of the company')),
                ('name', models.TextField(max_length=255, verbose_name='Name of the company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyPaintScheme',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateField(null=True, verbose_name='Approximate date when the paint scheme has started')),
                ('end_date', models.DateField(null=True, verbose_name='Approximate date when the paint scheme has ended')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintscheme_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('railroad', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.company')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintscheme_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FreightCarCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letter', models.CharField(db_index=True, max_length=1, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name of the freight car category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('type', models.CharField(choices=[('OFFICIAL_DOCUMENT', 'Information from an official document'), ('REPORT', 'Information reported from somewhere/someone else'), ('STORY', 'An story/memory informed by someone')], max_length=64)),
                ('content', models.TextField(max_length=65535)),
                ('status', models.CharField(choices=[('DISCUSSION', 'Information is still under discussion'), ('ANALYSIS', 'Information is under analysis by a moderator'), ('APPROVED', 'Information was approved by a moderator'), ('REJECTED', 'Information was rejected by a moderator')], default='ANALYSIS', max_length=10)),
                ('references', models.TextField(max_length=1024, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='information_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='information_moderator', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='information_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('abbrev', models.TextField(db_index=True, max_length=10, null=True)),
                ('name', models.TextField(max_length=255)),
                ('type', models.CharField(choices=[('STATION', 'Station'), ('STOP', 'Stop'), ('TERMINAL', 'Terminal'), ('CROSSING_YARD', 'Crossing Yard'), ('CLASSIFICATION_YARD', 'Classification Yard'), ('TUNNEL', 'Tunnel'), ('BRIDGE', 'Bridge'), ('OTHERS', 'Other Type')], max_length=100, null=True)),
                ('status', models.CharField(choices=[('PROJECT', 'Project'), ('UNDER_CONSTRUCTION', 'Under Construction'), ('WORKING', 'Working'), ('ABANDONED', 'Abandoned'), ('DEMOLISHED', 'Demolished'), ('TRANSFORMED', 'Transformed')], max_length=100, null=True)),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('elevation', models.FloatField(null=True, verbose_name='Elevation (in meters) of the location')),
                ('build_year', models.IntegerField(null=True, verbose_name='Year when it was built')),
                ('other_names', models.TextField(max_length=255, null=True)),
                ('is_verified', models.BooleanField(default=False, verbose_name="If the place is verified and it's correct")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('abbrev', models.CharField(max_length=2, verbose_name='Abbreviation of the state with 2 letters')),
                ('name', models.CharField(max_length=255, verbose_name='Full name of the state')),
                ('ibge_id', models.PositiveIntegerField(null=True, verbose_name='IBGE ID of the state')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocomotiveDesign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('prime_mover', models.CharField(choices=[('MANUAL', 'Manual'), ('STEAM', 'Steam'), ('DIESEL_MECHANICAL', 'Diesel-mechanical'), ('DIESEL_ELECTRIC', 'Diesel–electric'), ('DIESEL_HYDRAULIC', 'Diesel-hydraulic'), ('ELECTRIC', 'Electric'), ('GAS_TURBINE', 'Gas turbine'), ('HYBRID', 'Hybrid'), ('OTHERS', 'Others types')], max_length=100, null=True)),
                ('first_unit_year', models.IntegerField(null=True, verbose_name='Year when the first unit was produced')),
                ('adhesion_factor', models.FloatField(null=True, verbose_name='Adhesion factor of the locomotive (0 to 1)')),
                ('allow_multiple_units', models.BooleanField(null=True, verbose_name='If allows multiple traction units connected')),
                ('brake_system', models.CharField(max_length=200, null=True, verbose_name='Brake System (eg. 26L)')),
                ('cooling_fluid_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the cooling fluid')),
                ('cylinders_size', models.CharField(max_length=200, null=True, verbose_name='Cylinders Size')),
                ('fuel_capacity', models.CharField(max_length=200, null=True, verbose_name='Range of size of the fuel tank')),
                ('generator', models.CharField(max_length=200, null=True, verbose_name='Generator (eg. D32T)')),
                ('height', models.FloatField(null=True, verbose_name='Height of the locomotive in meters')),
                ('horsepower_available', models.PositiveIntegerField(null=True, verbose_name='Traction (available) horsepower')),
                ('horsepower_total', models.PositiveIntegerField(null=True, verbose_name='Total horsepower')),
                ('length', models.FloatField(null=True, verbose_name='Length of the locomotive in meters')),
                ('lubricant_oil_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the lubricant oil')),
                ('minimum_track_radius', models.FloatField(null=True, verbose_name='Minimum track curve radius in meters')),
                ('motor_capacity', models.CharField(max_length=200, null=True, verbose_name='Motor Capacity')),
                ('motor_type', models.CharField(max_length=200, null=True, verbose_name='Motor Type')),
                ('nickname', models.CharField(max_length=200, null=True, verbose_name='Nickname of the model')),
                ('primary_motor', models.CharField(max_length=200, null=True, verbose_name='Primary motor (eg: 12-645E)')),
                ('rpm_limit', models.IntegerField(null=True, verbose_name='RMP limit of the motor')),
                ('sand_capacity', models.FloatField(null=True, verbose_name='Total sand capacity in cubic meters')),
                ('serial_number_range', models.CharField(max_length=200, null=True, verbose_name='Serial number range')),
                ('traction_effort', models.FloatField(null=True, verbose_name='Traction effort in kgf')),
                ('traction_motor', models.CharField(max_length=200, null=True, verbose_name='Traction motor (eg: D29)')),
                ('truck_type', models.CharField(max_length=200, null=True, verbose_name='Truck type')),
                ('velocity_max', models.FloatField(null=True, verbose_name='Maximum operational velocity of the locomotive in km/h')),
                ('velocity_min', models.FloatField(null=True, verbose_name='Minimum operational velocity of the locomotive in km/h')),
                ('weight', models.FloatField(null=True, verbose_name='Weight of the locomotive in kilograms')),
                ('weight_adherent', models.FloatField(null=True, verbose_name='Adherent weight of the locomotive in kilograms')),
                ('weight_per_axle', models.FloatField(null=True, verbose_name='Weight per axle of the locomotive in kilograms')),
                ('wheel_arrangement_aar', models.CharField(max_length=20, null=True, verbose_name='AAR wheelset, eg: A1A-A1A')),
                ('wheel_arrangement_whyte', models.CharField(max_length=20, null=True, verbose_name='Whyte wheelset, eg: 0-4-2')),
                ('wheel_diameter', models.FloatField(null=True, verbose_name='Wheel diameter in millimeters')),
                ('wheelbase', models.FloatField(null=True, verbose_name='Wheelbase in meters')),
                ('width', models.FloatField(null=True, verbose_name='Width of the locomotive in meters')),
                ('wikipedia_url', models.CharField(max_length=255, null=True, verbose_name='Wikipedia URL of the model')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotivedesign_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('to', models.CharField(max_length=255, verbose_name='Destination e-mail address')),
                ('subject', models.CharField(max_length=255, verbose_name='Subject of the e-mail')),
                ('message_html', models.TextField(verbose_name='HTML content of the e-mail')),
                ('message_text', models.TextField(blank=True, null=True, verbose_name='Plain text content of the e-mail')),
                ('reply_to', models.CharField(blank=True, max_length=255, null=True, verbose_name='E-mail address to reply')),
                ('sent', models.BooleanField(default=False, verbose_name='Flag to indicate if the e-mail was sent')),
                ('sent_at', models.DateTimeField(null=True, verbose_name='Date/time when the e-mail was sent')),
                ('server_response', models.TextField(null=True, verbose_name='SMTP server response when sending the e-mail')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short name of the manufacturer')),
                ('full_name', models.CharField(max_length=255, verbose_name='Long (full) name of the manufacturer')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturer_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturer_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('title', models.CharField(max_length=255, null=True)),
                ('type', models.CharField(choices=[('DRAFT', 'Draft (not ready for processing yet)'), ('QUEUE', 'In the queue (waiting for processing)'), ('PROCESSING', 'Being processed by a worker')], max_length=64, verbose_name='The type of the media item')),
                ('description', models.TextField(max_length=65535, null=True)),
                ('thumbnail_filemgr_uuid', models.UUIDField(verbose_name='UUID of the file at FileMgr storage service')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft (not ready for processing yet)'), ('QUEUE', 'In the queue (waiting for processing)'), ('PROCESSING', 'Being processed by a worker'), ('REVIEW', 'Media is waiting approval/reject by a moderator'), ('PUBLISHED', 'Media was processed, approved and published'), ('REJECTED_TEMP', 'Media was temporary rejected, with a possible re-review'), ('REJECTED_PERM', 'Media was permanently rejected')], default='DRAFT', max_length=32)),
                ('known_author', models.BooleanField(default=False, verbose_name='If the author is known')),
                ('author_confirmed', models.BooleanField(default=False, verbose_name='If the author is in the system and confirmed')),
                ('original_url', models.TextField(max_length=255, null=True, verbose_name='Original URL, if downloaded')),
                ('references', models.TextField(max_length=1024, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='media_author+', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='media_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.location')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='media_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonRevenueCarType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letters', models.CharField(db_index=True, max_length=5, unique=True)),
                ('description', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('ELECTRICAL_MAINTENANCE', 'Equipment for Electrical Maintenance'), ('RESCUE', 'Rescue Equipment'), ('TRACK', 'Track Equipment'), ('VEGETATION', 'Vegetation Equipment'), ('OTHER', 'Other Equipment')], max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PassengerCarMaterial',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letter', models.CharField(db_index=True, max_length=1, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name of the material of the passenger cars')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PassengerCarType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letter', models.CharField(db_index=True, max_length=1, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name of the type of the passenger cars')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the section path')),
                ('type', models.CharField(choices=[('RAIL', 'The path is a rail section'), ('TUNNEL', 'The path is a tunnel section'), ('BRIDGE', 'The path is a bridge section'), ('BUILDING', 'The path represents a build (polygon)'), ('AREA', 'The path represents an area (polygon)')], max_length=100)),
                ('status', models.CharField(choices=[('ACTIVE', 'Path is active (with frequent or sporadic usage)'), ('INACTIVE', 'Path is inactive (exists but not used anymore)'), ('ERADICATED', 'Path was already eradicated')], max_length=100, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='path_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='path_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RollingStock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('type', models.CharField(choices=[('LOCOMOTIVE', 'Locomotive'), ('FREIGHT_CAR', 'Freight Car'), ('PASSENGER_CAR', 'Passenger Car'), ('RAILCAR_COACH_MU', 'Railcar, Rail motor coach or Multiple Unit'), ('NON_REVENUE_CAR', 'Non-revenue Car'), ('OTHERS', 'Others (non-listed)')], max_length=100)),
                ('is_sigo', models.BooleanField(default=True, verbose_name='If the rolling stock item is in SIGO standard')),
                ('sigo_number', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)], verbose_name='SIGO range end number')),
                ('painted_identifier', models.CharField(max_length=20, verbose_name='Painted identifier with letters/numbers/symbols')),
                ('serial_number', models.CharField(max_length=200, null=True, verbose_name='Serial number of the rolling stock')),
                ('build_year', models.IntegerField(null=True, verbose_name='Year when it was built')),
                ('state', models.CharField(choices=[('ACTIVE', 'Active'), ('INOPERATIVE', 'Inoperative'), ('DISMANTLED', 'Dismantled'), ('TRANSFORMED', 'Transformed'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rollingstock_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the route')),
                ('builder_railroad', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('name', models.CharField(max_length=255)),
                ('build_year', models.PositiveIntegerField(null=True, verbose_name='Year when the route section was built')),
                ('builder_railroad', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesection_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.route')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesection_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSectionLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('location_route_order', models.IntegerField(verbose_name='Ordering number inside the route, from origin to destiny')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_sections', to='api.location')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_locations', to='api.route')),
                ('railroad_route_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_locations', to='api.routesection')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrackGauge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('code', models.CharField(db_index=True, max_length=32, unique=True)),
                ('size', models.IntegerField(verbose_name='Gauge size in millimeters')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(editable=False, max_length=255, unique=True, verbose_name='Token used to login (from uServer-Auth)')),
                ('issued_at', models.DateTimeField(editable=False, verbose_name='Date when the token was issued by uServer-Auth')),
                ('expires_at', models.DateTimeField(editable=False, verbose_name='Date when the token expires (defined by uServer-Auth)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User that has the token')),
            ],
        ),
        migrations.CreateModel(
            name='SigoSeriesInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('sigo_start_number', models.IntegerField(validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)], verbose_name='SIGO range start number')),
                ('sigo_end_number', models.IntegerField(validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(0)], verbose_name='SIGO range end number')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sigoseriesinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='The information about the numeric range')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sigoseriesinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SigoRegional',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letter', models.CharField(max_length=1)),
                ('name', models.CharField(max_length=255, verbose_name='Name of the regional')),
                ('abbrev', models.CharField(max_length=20, null=True, verbose_name='Abbreviation of the regional')),
                ('original_company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSectionPath',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionpath_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.path', verbose_name='The path associated with the route section')),
                ('railroad_route_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.routesection', verbose_name='The route section which has the path')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionpath_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSectionLocationKilometer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('kilometer', models.FloatField(verbose_name='Kilometer of the location inside the route')),
                ('kilometer_year', models.PositiveIntegerField(null=True, verbose_name='Year of the recorded kilometer')),
                ('elevation', models.FloatField(null=True, verbose_name='Elevation (in meters) of the location kilometer')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocationkilometer_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('railroad_route_section_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kilometers', to='api.routesectionlocation')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectionlocationkilometer_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteSectionInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectioninformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the section')),
                ('railroad_route_section', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.route', verbose_name='Section which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routesectioninformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routeinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the route')),
                ('railroad_route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_information', to='api.route', verbose_name='Route that holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routeinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RollingStockInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rollingstockinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the rolling stock')),
                ('rolling_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.rollingstock', verbose_name='Rolling stock which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rollingstockinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='gauge',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.trackgauge'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='manufacturer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.manufacturer'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='regional',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.sigoregional'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='transformed_into',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.rollingstock', verbose_name='Rolling stock which this one was transformed into'),
        ),
        migrations.AddField(
            model_name='rollingstock',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rollingstock_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user'),
        ),
        migrations.CreateModel(
            name='PathPoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('elevation', models.FloatField(null=True, verbose_name='Elevation (in meters) of the point')),
                ('order', models.FloatField(verbose_name='Value used to sort the points')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pathpoint_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='api.path')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pathpoint_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PassengerCar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='passengercar_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('material', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.passengercarmaterial', verbose_name='Material of the passenger car')),
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.rollingstock', verbose_name='Rolling stock that is a passenger car')),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.passengercartype', verbose_name='Type of the passenger car')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='passengercar_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonRevenueCar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('is_self_propelled', models.BooleanField(default=False, verbose_name='If the car is self propelled')),
                ('prime_mover', models.CharField(choices=[('MANUAL', 'Manual'), ('STEAM', 'Steam'), ('DIESEL_MECHANICAL', 'Diesel-mechanical'), ('DIESEL_ELECTRIC', 'Diesel–electric'), ('DIESEL_HYDRAULIC', 'Diesel-hydraulic'), ('ELECTRIC', 'Electric'), ('GAS_TURBINE', 'Gas turbine'), ('HYBRID', 'Hybrid'), ('OTHERS', 'Others types')], max_length=100, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nonrevenuecar_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.rollingstock')),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.nonrevenuecartype')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nonrevenuecar_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaVideo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('fps', models.IntegerField(null=True, verbose_name='Framerate (frames per second) of the video')),
                ('duration', models.DurationField(null=True, verbose_name='Duration of the video')),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (max 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (max 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (max 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (max 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (max 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail (960×640 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail (480×320 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail (240x160 px)')], max_length=64, null=True, verbose_name='Biggest size tag of the media item')),
                ('raw_height', models.PositiveIntegerField(null=True, verbose_name='Height of the raw media item')),
                ('raw_width', models.PositiveIntegerField(null=True, verbose_name='Width of the raw media item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediavideo_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediavideo_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaRollingStock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediarollingstock_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('paint_scheme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.companypaintscheme', verbose_name='Paint scheme of the rolling stock presented in the media')),
                ('rolling_stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.rollingstock')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediarollingstock_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('decision', models.CharField(choices=[('REQUEST_CHANGES', 'Request changes (media will be temporary rejected until the author uploads it again)'), ('APPROVED', 'Approved with no changes needed'), ('REJECTED', 'Reject without possibility of updating the image')], max_length=64, null=True)),
                ('comment', models.CharField(max_length=1024, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediareview_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_moderator', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediareview_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('liked_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the media was liked')),
                ('item', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('liked_by', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='media_like_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who liked the media')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaImageSized',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('filemgr_uuid', models.UUIDField(verbose_name='UUID of the file at FileMgr storage service')),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (max 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (max 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (max 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (max 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (max 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail (960×640 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail (480×320 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail (240x160 px)')], max_length=64, null=True)),
                ('raw_height', models.PositiveIntegerField(null=True, verbose_name='Height of the sized media item')),
                ('raw_width', models.PositiveIntegerField(null=True, verbose_name='Width of the sized media item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediaimagesized_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media_item', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediaimagesized_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('focal_length', models.FloatField(null=True, verbose_name='Focal length of the lenses in millimeters')),
                ('aperture', models.CharField(max_length=255, null=True)),
                ('flash_fired', models.BooleanField(null=True)),
                ('iso', models.PositiveIntegerField(null=True)),
                ('orientation_angle', models.IntegerField(null=True)),
                ('is_flipped', models.BooleanField(null=True)),
                ('exposition', models.CharField(max_length=255, null=True)),
                ('datetime_taken', models.CharField(max_length=255, null=True)),
                ('camera_manufacturer', models.CharField(max_length=255, null=True)),
                ('camera_model', models.CharField(max_length=255, null=True)),
                ('exif_image_height', models.IntegerField(null=True)),
                ('exif_image_width', models.IntegerField(null=True)),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (max 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (max 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (max 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (max 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (max 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail (960×640 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail (480×320 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail (240x160 px)')], max_length=64, null=True, verbose_name='Biggest size tag of the media item')),
                ('raw_height', models.PositiveIntegerField(null=True, verbose_name='Height of the raw media item')),
                ('raw_width', models.PositiveIntegerField(null=True, verbose_name='Width of the raw media item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediaimage_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediaimage_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaFavorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('favorited_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the media was favorited')),
                ('favorited_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='media_favorite_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who favorited the media')),
                ('media', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('pages', models.PositiveIntegerField(null=True, verbose_name='Number of pages of the document')),
                ('black_and_white', models.BooleanField(verbose_name='If the document has colors (false) or is black and white (true)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediadocument_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediadocument_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('comment', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.comment', verbose_name='The comment associated with the media item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediacomment_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media', verbose_name='The media item associated with the comment')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mediacomment_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ManufacturerInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturerinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the manufacturer')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manufacturer', verbose_name='Manufacturer which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufacturerinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocomotiveDesignGauge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotivedesigngauge_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('gauge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.trackgauge', verbose_name='Gauge associated with the locomotive design')),
                ('locomotive_design', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.locomotivedesign', verbose_name='Locomotive design that uses the gauge')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotivedesigngauge_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='locomotivedesign',
            name='gauge',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.trackgauge'),
        ),
        migrations.AddField(
            model_name='locomotivedesign',
            name='manufacturer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotive_design_manufacturer', to='api.manufacturer'),
        ),
        migrations.AddField(
            model_name='locomotivedesign',
            name='motor_builder',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotive_design_motor_builder', to='api.manufacturer', verbose_name="The manufacturer of the locomotive's motor"),
        ),
        migrations.AddField(
            model_name='locomotivedesign',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotivedesign_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user'),
        ),
        migrations.CreateModel(
            name='Locomotive',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('adhesion_factor', models.FloatField(null=True, verbose_name='Adhesion factor of the locomotive (0 to 1)')),
                ('allow_multiple_units', models.BooleanField(null=True, verbose_name='If allows multiple traction units connected')),
                ('brake_system', models.CharField(max_length=200, null=True, verbose_name='Brake System (eg. 26L)')),
                ('cooling_fluid_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the cooling fluid')),
                ('cylinders_size', models.CharField(max_length=200, null=True, verbose_name='Cylinders Size')),
                ('fuel_capacity', models.FloatField(null=True, verbose_name='Maximum amount of liters of the tank')),
                ('generator', models.CharField(max_length=200, null=True, verbose_name='Generator (eg. D32T)')),
                ('height', models.FloatField(null=True, verbose_name='Height of the locomotive in meters')),
                ('horsepower_available', models.PositiveIntegerField(null=True, verbose_name='Traction (available) horsepower')),
                ('horsepower_total', models.PositiveIntegerField(null=True, verbose_name='Total horsepower')),
                ('length', models.FloatField(null=True, verbose_name='Length of the locomotive in meters')),
                ('lubricant_oil_capacity', models.FloatField(null=True, verbose_name='Capacity (in liters) of the lubricant oil')),
                ('minimum_track_radius', models.FloatField(null=True, verbose_name='Minimum track curve radius in meters')),
                ('motor_capacity', models.CharField(max_length=200, null=True, verbose_name='Motor Capacity')),
                ('motor_type', models.CharField(max_length=200, null=True, verbose_name='Motor Type')),
                ('nickname', models.CharField(max_length=200, null=True, verbose_name='Nickname of the model')),
                ('primary_motor', models.CharField(max_length=50, null=True, verbose_name='Primary motor (eg: 12-645E)')),
                ('rpm_limit', models.IntegerField(null=True, verbose_name='RMP limit of the motor')),
                ('sand_capacity', models.FloatField(null=True, verbose_name='Total sand capacity in cubic meters')),
                ('traction_effort', models.FloatField(null=True, verbose_name='Traction effort in kgf')),
                ('traction_motor', models.CharField(max_length=50, null=True, verbose_name='Traction motor (eg: D29)')),
                ('truck_type', models.CharField(max_length=200, null=True, verbose_name='Truck type')),
                ('velocity_max', models.FloatField(null=True, verbose_name='Maximum operational velocity of the locomotive in km/h')),
                ('velocity_min', models.FloatField(null=True, verbose_name='Minimum operational velocity of the locomotive in km/h')),
                ('weight', models.FloatField(null=True, verbose_name='Weight of the locomotive in kilograms')),
                ('weight_adherent', models.FloatField(null=True, verbose_name='Adherent weight of the locomotive in kilograms')),
                ('weight_per_axle', models.FloatField(null=True, verbose_name='Weight per axle of the locomotive in kilograms')),
                ('wheel_arrangement_aar', models.CharField(max_length=20, null=True, verbose_name='AAR wheelset, eg: A1A-A1A')),
                ('wheel_arrangement_whyte', models.CharField(max_length=20, null=True, verbose_name='Whyte wheelset, eg: 0-4-2')),
                ('wheel_diameter', models.FloatField(null=True, verbose_name='Wheel diameter in millimeters')),
                ('wheelbase', models.FloatField(null=True, verbose_name='Wheelbase in meters')),
                ('width', models.FloatField(null=True, verbose_name='Width of the locomotive in meters')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotive_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('design', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.locomotivedesign')),
                ('motor_builder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.manufacturer')),
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.rollingstock')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locomotive_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationTrackGauge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationtrackgauge_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_track_gauge', to='api.location', verbose_name='Location which has the track gauge')),
                ('track_gauge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.trackgauge', verbose_name='Track gauge associated with the location')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationtrackgauge_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationPath',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationpath_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.location', verbose_name='The location which has the path')),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.path', verbose_name='The path associated with the location')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationpath_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the location')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_information', to='api.location', verbose_name='Location which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locationinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationCity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('name', models.CharField(max_length=255, verbose_name='Name of the city')),
                ('ibge_id', models.PositiveIntegerField(null=True, verbose_name='IBGE ID of the city')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.locationstate', verbose_name='State where the city is situated')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='location',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.locationcity'),
        ),
        migrations.AddField(
            model_name='location',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user'),
        ),
        migrations.AddField(
            model_name='location',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user'),
        ),
        migrations.CreateModel(
            name='InformationVote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('value', models.SmallIntegerField(default=0, verbose_name='Vote value')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='informationvote_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='api.information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='informationvote_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
                ('voter', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_voter+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InformationEffect',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('field_name', models.TextField(max_length=255, verbose_name='Name of the field that will have the information changed once accepted')),
                ('old_value', models.TextField(max_length=1024, null=True, verbose_name='The original value of the field (before the information is accepted)')),
                ('new_value', models.TextField(max_length=1024, verbose_name='The new value of the field (after the information is accepted)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='informationeffect_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effects', to='api.information', verbose_name='Information object where the changes will take effect once accepted')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='informationeffect_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FreightCarType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letters', models.CharField(db_index=True, max_length=2, unique=True)),
                ('description', models.CharField(max_length=100, verbose_name='Description of the freight car gross weight type')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.freightcarcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FreightCarGrossWeightType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('letter', models.CharField(db_index=True, max_length=1, unique=True)),
                ('max_gross_tons', models.FloatField(verbose_name='Max gross weight of the freight car type')),
                ('gauge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.trackgauge')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FreightCar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='freightcar_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('gross_weight_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.freightcargrossweighttype', verbose_name='Gross weight type (represented as a letter) of the freight car')),
                ('model_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.freightcartype')),
                ('rolling_stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.rollingstock')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='freightcar_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('type', models.CharField(choices=[('BUG', 'Bug/problem report'), ('FEEDBACK', 'Feedback (suggestions, critics, etc)'), ('INCORRECT_INFO', 'Incorrect information presented on the website'), ('AUTHOR_REQUEST', 'Author definition and copyright issues'), ('DATA_REMOVAL', 'Request to remove data')], max_length=64)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('email', models.CharField(blank=True, max_length=128, null=True)),
                ('phone', models.CharField(blank=True, max_length=128, null=True)),
                ('message', models.TextField(blank=True, max_length=5000, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyPaintSchemeInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintschemeinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the paint scheme')),
                ('paint_scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='railroad_information', to='api.companypaintscheme', verbose_name='Paint scheme which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companypaintschemeinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companyinformation_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.information', verbose_name='Information associated with the company')),
                ('railroad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_information', to='api.company', verbose_name='Company which holds the information')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companyinformation_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('liked_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the comment was liked')),
                ('comment', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.comment', verbose_name='The comment that was liked')),
                ('liked_by', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='comment_like_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who liked the comment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.album', verbose_name='The album associated with the media item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='albummedia_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.media', verbose_name='The media item associated with the album')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='albummedia_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('liked_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the album was liked')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.album', verbose_name='The album that was liked')),
                ('liked_by', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='album_like_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who liked the album')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumFavorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('favorited_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/time when the album was favorited')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.album')),
                ('favorited_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='album_favorite_creator', to=settings.AUTH_USER_MODEL, verbose_name='User who favorited the album')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record primary key (UUID v4)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('album', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.album', verbose_name='The album associated with the comment')),
                ('comment', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.comment', verbose_name='The comment associated with the album')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='albumcomment_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='albumcomment_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.locationcity'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.locationstate'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='informationvote',
            constraint=models.UniqueConstraint(fields=('information', 'voter'), name='Only one vote per user on each information'),
        ),
    ]
