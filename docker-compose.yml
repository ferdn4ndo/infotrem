version: '3'

services:
  infotrem-django:
    container_name: infotrem-api
    restart: unless-stopped
    build:
      context: backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/code/
    expose:
      - 5000

  infotrem-node:
    container_name: infotrem-app
    restart: unless-stopped
    build:
      context: frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend/app:/code/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      - ./frontend/app/package.json:/code/package.json
      - ./frontend/app/package-lock.json:/code/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/code/app/node_modules
    expose:
      - 8080

networks:
  default:
    external:
      name: nginx-proxy

volumes:
  notused:
